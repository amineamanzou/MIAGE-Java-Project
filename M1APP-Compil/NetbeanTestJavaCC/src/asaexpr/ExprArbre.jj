/*
 * ExprArbre.jj
 *
 * Daniel Diaz - 2013
 *
 * Expressions arithmetiques en JavaCC: creation Arbre Syntaxe Abstraite.
 */

options {
   OUTPUT_DIRECTORY = "../jjgener";
   STATIC = false;
}

PARSER_BEGIN(ExprArbre)

    package jjgener;

    import asaexpr.*;

    public class ExprArbre {
	public static void main(String args[]) throws ParseException {
            ExprArbre syn = new ExprArbre(System.in);

            System.out.println("entrer une expression: ");
            ASAExpr a = syn.parse();
            System.out.println(a.notationExplorateur());
            System.out.println(a.evalue());
        }
    }

PARSER_END(ExprArbre)


/* Partie syntaxique
 *
 * On ajoute une regle qui tient lieu d'axiome
 * pour s'assurer qu'il y a bien un \n a la fin de l'expression.
 *
 * Chaque regle retourne l'ASA associe a la sous-expression
 * qu'elle vient d'analyser.
 */

    // regle additionnelle: parse -> expression \n
    // pour s'assurer qu'il y a bien un \n a la fin de l'expression
ASAExpr parse() :  
                                            { ASAExpr x; }
{
    x = expression() "\n"                   { return x; }
}


    // expression -> terme { + terme | - terme }
ASAExpr expression() : 
                                            { ASAExpr x, y; }
{
    x = terme()
    (   "+"  y = terme()                    { x = new ASAExprPlus(x, y); }
    |   "-"  y = terme()                    { x = new ASAExprMoins(x, y); }
    )*
                                            { return x; }
}


    // terme -> facteur { * facteur | / facteur | % modulo }
ASAExpr terme() :
                                            { ASAExpr x, y; }
{
    x = moinsUnaire()
    (   "*"  y = moinsUnaire()                  { x = new ASAExprMult(x, y); }
    |	"/"  y = moinsUnaire()                  { x = new ASAExprDivis(x, y); }
    |	"%"  y = moinsUnaire()                  { x = new ASAExprMod(x, y); }
    )*
                                            { return x; }
}
    // moinsUnaire -> - moinsUnaire | facteur 
ASAExpr moinsUnaire() :
                                            { ASAExpr x; }
{
   ( "-" x = moinsUnaire()                  { x = new ASAExprMoinsUn(x); }
   | x = facteur()
   )
                                            { return x; }    
}

    // facteur -> ( expression ) | entier 
ASAExpr facteur() :
                                            { ASAExpr x; Token t; }
{

    ( 	"("  x = expression()  ")"
    |   t = <ENTIER>                        { x = new ASAExprEntier(Integer.parseInt(t.image)); }
    |   t = <IDENT>                         { x = new ASAExprIdent(t.image); }
    )
                                            { return x; }
}


/* Partie lexicale
 * 
 * Les unites constantes sont directement referencees dans les regles.
 * On ne decrit donc que les separateurs et les unites non constantes.
 */

SKIP : 
{ " " | "\t" | "\r" }


TOKEN :
{ 
    < ENTIER: ( ["0"-"9"] )+ >
    |
    < IDENT: ( ["a"-"z","A"-"Z"] )+ >
}

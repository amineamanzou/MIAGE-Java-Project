/* Generated By:JavaCC: Do not edit this line. ExprArbre.java */
    package jjgener;

    import asaexpr.*;

    public class ExprArbre implements ExprArbreConstants {
        public static void main(String args[]) throws ParseException {
            ExprArbre syn = new ExprArbre(System.in);

            System.out.println("entrer une expression: ");
            ASAExpr a = syn.parse();
            System.out.println(a.notationExplorateur());
            System.out.println(a.evalue());
        }

/* Partie syntaxique
 *
 * On ajoute une regle qui tient lieu d'axiome
 * pour s'assurer qu'il y a bien un \n a la fin de l'expression.
 *
 * Chaque regle retourne l'ASA associe a la sous-expression
 * qu'elle vient d'analyser.
 */

    // regle additionnelle: parse -> expression \n
    // pour s'assurer qu'il y a bien un \n a la fin de l'expression
  final public ASAExpr parse() throws ParseException {
                                              ASAExpr x;
    x = expression();
    jj_consume_token(1);
                                              {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

    // expression -> terme { + terme | - terme }
  final public ASAExpr expression() throws ParseException {
                                              ASAExpr x, y;
    x = terme();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 3:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        jj_consume_token(2);
        y = terme();
                                              x = new ASAExprPlus(x, y);
        break;
      case 3:
        jj_consume_token(3);
        y = terme();
                                              x = new ASAExprMoins(x, y);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                              {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

    // terme -> facteur { * facteur | / facteur | % modulo }
  final public ASAExpr terme() throws ParseException {
                                              ASAExpr x, y;
    x = moinsUnaire();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
      case 5:
      case 6:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
        jj_consume_token(4);
        y = moinsUnaire();
                                                  x = new ASAExprMult(x, y);
        break;
      case 5:
        jj_consume_token(5);
        y = moinsUnaire();
                                                  x = new ASAExprDivis(x, y);
        break;
      case 6:
        jj_consume_token(6);
        y = moinsUnaire();
                                                  x = new ASAExprMod(x, y);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                              {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

    // moinsUnaire -> - moinsUnaire | facteur 
  final public ASAExpr moinsUnaire() throws ParseException {
                                              ASAExpr x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      jj_consume_token(3);
      x = moinsUnaire();
                                              x = new ASAExprMoinsUn(x);
      break;
    case 7:
    case ENTIER:
    case IDENT:
      x = facteur();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                              {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

    // facteur -> ( expression ) | entier 
  final public ASAExpr facteur() throws ParseException {
                                              ASAExpr x; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
      jj_consume_token(7);
      x = expression();
      jj_consume_token(8);
      break;
    case ENTIER:
      t = jj_consume_token(ENTIER);
                                              x = new ASAExprEntier(Integer.parseInt(t.image));
      break;
    case IDENT:
      t = jj_consume_token(IDENT);
                                              x = new ASAExprIdent(t.image);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                              {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ExprArbreTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc,0xc,0x70,0x70,0x3088,0x3080,};
   }

  /** Constructor with InputStream. */
  public ExprArbre(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExprArbre(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExprArbreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExprArbre(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExprArbreTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExprArbre(ExprArbreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExprArbreTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }

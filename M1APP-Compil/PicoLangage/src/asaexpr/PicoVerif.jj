/*
 * PicoVerif.jj
 *
 *
 * PicoLanguage en JavaCC: verification de la syntaxe.
 */

options {
   OUTPUT_DIRECTORY = "../jjgener";
   STATIC = false;
}

PARSER_BEGIN(PicoVerif)

    package jjgener;
    import asaexpr;

    public class PicoVerif {
	public static void main(String args[]) throws ParseException {
            PicoVerif syn = new PicoVerif(System.in);

            System.out.print("entrer une expression: ");
            syn.verifie();
            System.out.println("syntaxe correcte");
        }
    }

PARSER_END(PicoVerif)

/* Partie syntaxique
 *
 * On ajoute une regle qui tient lieu d'axiome
 * pour s'assurer qu'il y a bien un \n a la fin de l'expression.
 */

    // regle additionnelle: verif -> expression \n
    // pour s'assurer qu'il y a bien un \n a la fin de l'expression
void verifie() :  
{}
{
    expression() "\n"
}


    // expression -> terme { + terme | - terme }
void expression() : 
{}
{
    terme()
    (   "+"  terme()
    |   "-"  terme()
    )*
}


    // terme -> facteur { * facteur | / facteur }
void terme() :
{}
{
    facteur()
    (   "*"  facteur()
    |	"/"  facteur()
    )*
}


    // facteur -> ( expression ) | entier
void facteur() :
{}
{
     	"("  expression()  ")"
    |   <ENTIER>
}


/* Partie lexicale
 * 
 * Les unites constantes sont directement referencees dans les regles.
 * On ne decrit donc que les separateurs et les unites non constantes.
 */

SKIP :
{ " " | "\t" | "\r" }


TOKEN :
{ 
    < ENTIER: ( ["0"-"9"] )+ >
}